-- ECSE 439: Assignment 2
-- March 25th, 2022
-- Brendan Marks (260866323)
-- Felix Simard (260865674)


--@path HAL=/HAL/model/hal.ecore
--@path URN=/seg.jUCMNav/src/seg/jUCMNav/emf/urn.ecore

module Hal2Urn;
create OUT : URN from IN : HAL;

-- HAL to URN
rule hal2urn {
	from 
		h : HAL!HAL
	to 
		u : URN!URNspec (
				
		),
		d: URN!URNdefinition (
			urnspec <- u
		)
	do {
		thisModule.HAL <- h;
	}
}
	
-- Global helper variables
helper def : previous : URN!IURNNode = '';
helper def : lhs : URN!IURNNode = '';
helper def : rhs : URN!IURNNode = '';
helper def : trueOut : URN!IURNNode = '';
helper def : falseOut : URN!IURNNode = '';
helper def : inElem : URN!IURNNode = '';


-- Create connections
rule searchTree(node: URN!IURNNode, parent: URN!IURNNode, notTriggered: URN!IURNNode, container : URL!UCMmap, isLeft: Boolean) {
	do {
		if (node.oclIsTypeOf(HAL!AtomicRelationalTerm)) {
			if (thisModule.trueOut.oclIsTypeOf(URN!StartPoint)) {
				thisModule.NewConnection(thisModule.trueOut, thisModule.resolveTemp(node, 'st'), container);
				thisModule.trueOut <- OclUndefined;
			}
			-- set the helpers +
			thisModule.trueOut <- thisModule.resolveTemp(node, 'da');
			thisModule.NewConnection(thisModule.resolveTemp(node, 'st'), thisModule.resolveTemp(node, 'da'), container);
			thisModule.inElem <- thisModule.resolveTemp(node, 'st');
			thisModule.falseOut <- thisModule.resolveTemp(node, 'st');

		} else if (node.oclIsTypeOf(HAL!CompoundRelationalTerm)) {
			thisModule.searchTree(node.LHS, node, notTriggered, container, true);
			-- lhs helpers set
			thisModule.lhstrue <- thisModule.trueOut;
			thisModule.lhsin <- thisModule.inElem;
			thisModule.lhsfalse <- thisModule.falseOut;
			
			thisModule.stack <- thisModule.stack.union(Sequence{thisModule.lhstrue});
			thisModule.stack <- thisModule.stack.union(Sequence{thisModule.lhsin});
			thisModule.stack <- thisModule.stack.union(Sequence{thisModule.lhsfalse});
			
			thisModule.searchTree(node.RHS, node, notTriggered, container, false);
			
			-- rhs helpers set
			thisModule.rhstrue <- thisModule.trueOut;
			thisModule.rhsin <- thisModule.inElem;
			thisModule.rhsfalse <- thisModule.falseOut;
			
			thisModule.stack <- thisModule.stack.append(thisModule.rhstrue);
			thisModule.stack <- thisModule.stack.append(thisModule.rhsin);
			thisModule.stack <- thisModule.stack.append(thisModule.rhsfalse);
						
			--get current values from stack
			thisModule.lhstrue <- thisModule.stack->at(thisModule.stack->size() - 5);
			thisModule.lhsin <- thisModule.stack.at(thisModule.stack.size() - 4);
			thisModule.lhsfalse <- thisModule.stack.at(thisModule.stack.size() - 3);
			thisModule.rhstrue <- thisModule.stack.at(thisModule.stack.size() - 2);
			thisModule.rhsin <- thisModule.stack.at(thisModule.stack.size() - 1);
			thisModule.rhsfalse <- thisModule.stack.at(thisModule.stack.size());
			
			-- pop off stack
			if (thisModule.stack.size() = 6) {
				thisModule.stack <- Sequence{};
			} else {
				thisModule.stack <- thisModule.stack.subSequence(1, thisModule.stack.size() - 6);
			}
			
			if(node.operator = #AND) {								
				thisModule.NewConnection(thisModule.lhsfalse, thisModule.resolveTemp(node, 'oj'), container);
				thisModule.NewConnection(thisModule.lhstrue, thisModule.rhsin, container);
				thisModule.NewConnection(thisModule.rhsfalse, thisModule.resolveTemp(node, 'oj'), container);
				
				--set values to be appended to stack when returns 
				thisModule.trueOut <- thisModule.rhstrue;
				thisModule.inElem <- thisModule.lhsin;
				thisModule.falseOut <- thisModule.resolveTemp(node, 'oj');
				
			}
			if (node.operator = #OR) {
				thisModule.NewConnection(thisModule.lhstrue, thisModule.resolveTemp(node, 'oj'), container);
				thisModule.NewConnection(thisModule.rhstrue, thisModule.resolveTemp(node, 'oj'), container);
				thisModule.NewConnection(thisModule.lhsfalse, thisModule.rhsin, container);
				
				--set values to be appended to stack when returns
				thisModule.trueOut <- thisModule.resolveTemp(node, 'oj');
				thisModule.inElem <- thisModule.lhsin;
				thisModule.falseOut <- thisModule.rhsfalse;
			}
		}
	}
}

-- Create a direction arrow
rule NewDirectionArrow(container : URN!UCMmap) {
	to
		da: URN!DirectionArrow (
			diagram <- container	
		)
	do {
		da;	
	}
}

-- AutomationRule to UCMmap
rule AutomationRule2UCMmap {
	from
		ar: HAL!AutomationRule
	to
		-- UCMmap
		um: URN!UCMmap (
			name <- ar.name,
			urndefinition <- thisModule.resolveTemp(ar.eContainer(), 'd')
		),
		-- StartPoint
		sp: URN!StartPoint (
			name <- 'checkRule',
			diagram <- um
		),
		-- EndPoint
		epTriggered: URN!EndPoint (
			name <- 'ruleTriggered',
			diagram <- um
		),
		epNotTriggered: URN!EndPoint (
			name <- 'ruleNotTriggered',
			diagram <- um
		),
		-- Labels
		label4StartPoint: URN!NodeLabel (
			node <- sp
		),
		label4epTriggered: URN!NodeLabel (
			node <- epTriggered
		),
		label4epNotTriggered: URN!NodeLabel (
			node <- epNotTriggered
		)
		
	do {	
		
		-- Connections
		thisModule.previous <- sp;
		
		thisModule.trueOut <- sp;
		thisModule.NextTrueOut <- OclUndefined;
		thisModule.NextFalseOut <- OclUndefined;
		
		thisModule.stack <- Sequence{};
		thisModule.searchTree(ar.precondition, OclUndefined, epNotTriggered, um, OclUndefined);
		
		thisModule.NewConnection(thisModule.falseOut, epNotTriggered, um);
	
		
		-- Connect actions sequentially one after the other
		for (a in HAL!Action.allInstances()) {
			if (a.eContainer() = ar) {
				thisModule.NewConnection(thisModule.trueOut, thisModule.resolveTemp(a, 'respRef'), um);
				thisModule.trueOut <- thisModule.resolveTemp(a, 'respRef');
			}
		}
			
		-- Connect last action to ruleTriggered termination point
		thisModule.NewConnection(thisModule.trueOut, epTriggered, um);
	
	}
}


-- Command to Responsibility
rule Command2Responsibility {
	from 
		com: HAL!Command
	to
		res: URN!Responsibility (
				name <- com.name,
				urndefinition <- thisModule.resolveTemp(thisModule.HAL, 'd')
			)
}

-- Actions to ComponentRef
rule Action2ComponentRef {
	from 
		action: HAL!Action
	to
		respRef: URN!RespRef (
			diagram <- thisModule.resolveTemp(action.eContainer(), 'um'),
			respDef <- thisModule.resolveTemp(action.command, 'res'),
			contRef <- compRef
		),
		compRef: URN!ComponentRef (
			diagram <- thisModule.resolveTemp(action.eContainer(), 'um'),
			contDef <- thisModule.resolveTemp(action.actuator, 'comp'),
			nodes <- respRef,
			width <- 300,
			height <- 100
		),
		label4respRef: URN!NodeLabel (
			node <- respRef	
		),
		label4compRef: URN!ComponentLabel (
			contRef <- compRef	
		)
		
}

-- Device to Component
rule Device2Component {
	from
		dev: HAL!Device
	to
		comp: URN!Component (
			name <- dev.eContainer().name + '.' + dev.name,
			urndefinition <- thisModule.resolveTemp(thisModule.HAL, 'd')
		)
}


-- CompoundRelationalTerm to OrJoin
rule CompoundRelationalTerm2OrJoin {
	from
		crt: HAL!CompoundRelationalTerm
	to
		oj: URN!OrJoin (
			diagram <- thisModule.resolveTemp(crt.eContainer(), 'um')
		)
	do {
		oj.diagram <- thisModule.resolveTemp(thisModule.getContainer(crt), 'um');	
	}
}

-- AtomicRelationalTerm to Stub
rule AtomicRelationalTerm2Stub {
	from
		art: HAL!AtomicRelationalTerm
	to
		st: URN!Stub (
			-- diagram being set in the do block
		),
		label4Stub: URN!NodeLabel (
			node <- st		
		),
		da: URN!DirectionArrow (
			-- diagram being set in the do block
		)
	do {
		st.diagram <- thisModule.resolveTemp(thisModule.getContainer(art), 'um');
		da.diagram <- thisModule.resolveTemp(thisModule.getContainer(art), 'um');
		
		if(art.negated = true) {
			st.name <- 'NOT (' + art.sensor.name + ' IN ' + art.sensor.eContainer().name + ' ' + thisModule.getOperatorSymbol(art.operator) + ' ' + art.comparedAgainstValue + ')';	
		} else {
			st.name <- art.sensor.name + ' IN ' + art.sensor.eContainer().name + ' ' + thisModule.getOperatorSymbol(art.operator) + ' ' + art.comparedAgainstValue;	
			
		}
		st;
		
	}
}

-- Convert word operator to operator symbol (eg: LESSTHAN : <)
rule getOperatorSymbol(operator: String) {
	do {
		thisModule.operatorSymbol <- '';
		if(operator = #EQUAL) {
			thisModule.operatorSymbol <- '=';
		} else if(operator = #NOTEQUAL) {
			thisModule.operatorSymbol <- '!=';
		} else if(operator = #LESSTHAN) {
			thisModule.operatorSymbol <-  '<';
		} else if(operator = #LESSTHANOREQUAL) {
			thisModule.operatorSymbol <- '<=';	
		} else if(operator = #GREATERTHAN) {
			thisModule.operatorSymbol <- '>';	
		} else {
			thisModule.operatorSymbol <- '>=';	
		}
		thisModule.operatorSymbol;
	}
}

-- Traverse containement of BooleanExpression(s) to find closest container of a given BooleanExpression
helper def : getContainer(current: HAL!BooleanExpression) : HAL!AutomationRule = 
	if current.oclIsTypeOf(HAL!AutomationRule)
	then 
		current
	else
		thisModule.getContainer(current.eContainer())
	endif;
	


-- Create connections helper method
rule NewConnection(source : URN!IURNNode, target : URN!IURNNode, container : URN!UCMmap) {
	to
		connection: URN!NodeConnection (
				source <- source,
				target <- target,
				diagram <- container
			)
	do {
		target;
	}
		
}

